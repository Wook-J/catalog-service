name: Commit Stage						# 워크플로의 이름
on: push								# 새 저장소를 푸시하면 워크플로를 시작

jobs:
  build:								# jobs 내 build라는 작업을 정의(job ID)
    name: Build and Test				# 작업의 인간친화적 명칭
    runs-on: ubuntu-22.04				# 가상머신에서 실행됨(운영체제 환경)
    permissions:						# 워크플로가 사용할 GitHub 리소스에 대한 권한 설정
      contents: read					# 저장소 코드 읽기 권한(체크아웃 하려면 필요)
      security-events: write			# 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:								# 작업을 이루는 단계
    - name: Checkout source code		# 소스코드를 GitHub저장소에서 현재 runner로 checkout
      uses: actions/checkout@v4			# 체크아웃 액션의 4번째 메이저 버전
    - name: Set up JDK					# Java Development Kit를 설치하는 단계
      uses: actions/setup-java@v4		# java 런타임을 설치하고 설정
      with:								# 사용할 버전, 배포, 캐시 유형을 정의
        distribution: temurin			# OpenJDK 기반의 Adoptium Temurin 배포본 사용.
        java-version: 21				# Java 21버전 설치
        cache: gradle					# Gradle 빌드 캐시를 사용해서 빌드시간 단축
    - name: Build, unit tests and integration tests		# 빌드, 단위테스트 및 통합테스트
      run: |
        chmod +x gradlew
        ./gradlew build -x test
    - name: Code vulnerability scanning
      uses: anchore/scan-action@v3		# 그라이프를 사용해 취약성 스캔
      id: scan
      with:
        path: "${{ github.workspace }}"	# 체크아웃된 저장소 전체를 스캔
        fail-build: false				# 취약점 발견되도 빌드 자체는 실패하지 않음
        severity-cutoff: high			# 높음 이상 심각도 취약점만 중요하게 다룸
        acs-report-enable: true			# 스캔 결과를 리포트 파일로 생성

#   Upload vulnerability report 단계는 삭제 또는 주석처리
#   - name: Upload vulnerability report
#     uses: github/codeql-action/upload-sarif@v3	# 취약점 스캔 결과를 GitHub Security 탭으로 업로드
#     if: success() || failure()		# 스캔이 성공하든 실패하든 항상 SARIF 파일 업로드
#      with:
#      sarif_file: ${{ steps.scan.outputs.sarif }}	# 이전 scan 스텝의 출력값(SARIF 리포트 파일) 사용
